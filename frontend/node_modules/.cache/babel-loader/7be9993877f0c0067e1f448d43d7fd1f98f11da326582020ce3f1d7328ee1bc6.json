{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cymst\\\\Documents\\\\monad bot\\\\frontend\\\\src\\\\components\\\\LogsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './LogsPage.css'; // Assuming you have or will create this CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000'; // Adjust as needed\n\nfunction LogsPage() {\n  _s();\n  var _selectedTaskDetails$;\n  const [tasks, setTasks] = useState([]);\n  const [selectedTaskId, setSelectedTaskId] = useState(null);\n  const [selectedTaskDetails, setSelectedTaskDetails] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoadingTasks, setIsLoadingTasks] = useState(false);\n  const [isLoadingDetails, setIsLoadingDetails] = useState(false);\n  const pollingIntervalRef = useRef(null);\n  const logsEndRef = useRef(null); // Ref for scrolling to the bottom of logs\n\n  // --- Fetching Task List ---\n  const fetchTasks = useCallback(async () => {\n    setIsLoadingTasks(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/v1/tasks`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      // Sort tasks by start time, newest first\n      const sortedTasks = Object.entries(data).map(([id, task]) => ({\n        id,\n        ...task\n      })).sort((a, b) => new Date(b.start_time) - new Date(a.start_time));\n      setTasks(sortedTasks);\n    } catch (e) {\n      console.error(\"Error fetching tasks:\", e);\n      setError(`Failed to fetch tasks: ${e.message}`);\n      setTasks([]); // Clear tasks on error\n    } finally {\n      setIsLoadingTasks(false);\n    }\n  }, []);\n\n  // --- Fetching Task Details ---\n  const fetchTaskDetails = useCallback(async taskId => {\n    if (!taskId) return;\n    setIsLoadingDetails(true);\n    setError(null); // Clear previous detail errors\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/v1/tasks/${taskId}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(`Task with ID ${taskId} not found.`);\n        }\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setSelectedTaskDetails(data);\n      // Scroll to bottom after logs update\n      scrollToBottom();\n      return data; // Return data for polling check\n    } catch (e) {\n      console.error(`Error fetching details for task ${taskId}:`, e);\n      setError(`Failed to fetch details for task ${taskId}: ${e.message}`);\n      setSelectedTaskDetails(null); // Clear details on error\n      setSelectedTaskId(null); // Deselect task if details fail\n      return null; // Indicate failure\n    } finally {\n      setIsLoadingDetails(false);\n    }\n  }, []);\n\n  // --- Effects ---\n\n  // Fetch tasks on initial mount\n  useEffect(() => {\n    fetchTasks();\n  }, [fetchTasks]);\n\n  // Fetch details and manage polling when selectedTaskId changes\n  useEffect(() => {\n    // Clear previous interval if any\n    if (pollingIntervalRef.current) {\n      clearInterval(pollingIntervalRef.current);\n      pollingIntervalRef.current = null;\n    }\n    setSelectedTaskDetails(null); // Clear previous details when selection changes\n\n    if (selectedTaskId) {\n      const startPolling = async () => {\n        const initialDetails = await fetchTaskDetails(selectedTaskId);\n\n        // Start polling only if the task is still active (pending or running)\n        if (initialDetails && ['pending', 'running'].includes(initialDetails.status)) {\n          pollingIntervalRef.current = setInterval(async () => {\n            const currentDetails = await fetchTaskDetails(selectedTaskId);\n            // Stop polling if task is completed or failed, or if fetch failed\n            if (!currentDetails || !['pending', 'running'].includes(currentDetails.status)) {\n              clearInterval(pollingIntervalRef.current);\n              pollingIntervalRef.current = null;\n            }\n          }, 3000); // Poll every 3 seconds\n        }\n      };\n      startPolling();\n    }\n\n    // Cleanup function to clear interval when component unmounts or selectedTaskId changes\n    return () => {\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n      }\n    };\n  }, [selectedTaskId, fetchTaskDetails]);\n\n  // --- Helper Functions ---\n  const handleTaskSelect = taskId => {\n    if (taskId === selectedTaskId) {\n      setSelectedTaskId(null); // Deselect if clicking the same task\n    } else {\n      setSelectedTaskId(taskId);\n    }\n  };\n  const formatTimestamp = isoString => {\n    if (!isoString) return '';\n    try {\n      // More robust parsing\n      const date = new Date(isoString);\n      if (isNaN(date.getTime())) {\n        // Check if date is valid\n        return isoString; // Return original string if invalid\n      }\n      // Format to local time, include seconds\n      return date.toLocaleString(undefined, {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n      });\n    } catch (e) {\n      console.error(\"Error formatting timestamp:\", isoString, e);\n      return isoString; // Fallback\n    }\n  };\n\n  // Scroll to the bottom of the logs container\n  const scrollToBottom = () => {\n    var _logsEndRef$current;\n    (_logsEndRef$current = logsEndRef.current) === null || _logsEndRef$current === void 0 ? void 0 : _logsEndRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  // --- Rendering ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"logs-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Logs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-list-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Recent Tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: fetchTasks,\n          disabled: isLoadingTasks,\n          children: isLoadingTasks ? 'Refreshing...' : 'Refresh List'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), isLoadingTasks && tasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading tasks...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 26\n        }, this) : tasks.length === 0 && !isLoadingTasks ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No tasks found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 26\n        }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"task-list\",\n          children: tasks.map(task => {\n            var _task$status, _task$status2;\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `task-item ${task.id === selectedTaskId ? 'selected' : ''} status-${(_task$status = task.status) === null || _task$status === void 0 ? void 0 : _task$status.toLowerCase()}`,\n              onClick: () => handleTaskSelect(task.id),\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"task-id\",\n                children: [\"ID: \", task.id.substring(0, 8), \"...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"task-desc\",\n                children: task.description || 'No description'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `task-status status-${(_task$status2 = task.status) === null || _task$status2 === void 0 ? void 0 : _task$status2.toLowerCase()}`,\n                children: task.status || 'Unknown'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"task-time\",\n                children: [\"Started: \", formatTimestamp(task.start_time)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 37\n              }, this)]\n            }, task.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-details-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Task Details \", selectedTaskId ? `(${selectedTaskId.substring(0, 8)}...)` : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), isLoadingDetails ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading details...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this) : selectedTaskDetails ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"details-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Status:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 32\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `status-${(_selectedTaskDetails$ = selectedTaskDetails.status) === null || _selectedTaskDetails$ === void 0 ? void 0 : _selectedTaskDetails$.toLowerCase()}`,\n              children: selectedTaskDetails.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 57\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Description:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 32\n            }, this), \" \", selectedTaskDetails.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Started:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 32\n            }, this), \" \", formatTimestamp(selectedTaskDetails.start_time)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Last Updated:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 32\n            }, this), \" \", formatTimestamp(selectedTaskDetails.last_updated)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"logs-output\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Logs:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n              children: [selectedTaskDetails.logs && selectedTaskDetails.logs.length > 0 ? selectedTaskDetails.logs.map((log, index) => {\n                var _log$level, _log$level2;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `log-entry log-${(_log$level = log.level) === null || _log$level === void 0 ? void 0 : _log$level.toLowerCase()}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"log-time\",\n                    children: formatTimestamp(log.timestamp)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 51\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"log-level\",\n                    children: [\"[\", (_log$level2 = log.level) === null || _log$level2 === void 0 ? void 0 : _log$level2.toUpperCase(), \"]\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 200,\n                    columnNumber: 51\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"log-message\",\n                    children: log.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 51\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 47\n                }, this);\n              }) : \"No logs yet.\", /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: logsEndRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 41\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a task from the list to view its details and logs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n}\n_s(LogsPage, \"z75x50iUo3e57RR0+hqAaDgBeMQ=\");\n_c = LogsPage;\nexport default LogsPage;\nvar _c;\n$RefreshReg$(_c, \"LogsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","LogsPage","_s","_selectedTaskDetails$","tasks","setTasks","selectedTaskId","setSelectedTaskId","selectedTaskDetails","setSelectedTaskDetails","error","setError","isLoadingTasks","setIsLoadingTasks","isLoadingDetails","setIsLoadingDetails","pollingIntervalRef","logsEndRef","fetchTasks","response","fetch","ok","Error","status","data","json","sortedTasks","Object","entries","map","id","task","sort","a","b","Date","start_time","e","console","message","fetchTaskDetails","taskId","scrollToBottom","current","clearInterval","startPolling","initialDetails","includes","setInterval","currentDetails","handleTaskSelect","formatTimestamp","isoString","date","isNaN","getTime","toLocaleString","undefined","year","month","day","hour","minute","second","hour12","_logsEndRef$current","scrollIntoView","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","length","_task$status","_task$status2","toLowerCase","substring","description","last_updated","logs","log","index","_log$level","_log$level2","level","timestamp","toUpperCase","ref","_c","$RefreshReg$"],"sources":["C:/Users/cymst/Documents/monad bot/frontend/src/components/LogsPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport './LogsPage.css'; // Assuming you have or will create this CSS file\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000'; // Adjust as needed\r\n\r\nfunction LogsPage() {\r\n    const [tasks, setTasks] = useState([]);\r\n    const [selectedTaskId, setSelectedTaskId] = useState(null);\r\n    const [selectedTaskDetails, setSelectedTaskDetails] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [isLoadingTasks, setIsLoadingTasks] = useState(false);\r\n    const [isLoadingDetails, setIsLoadingDetails] = useState(false);\r\n    const pollingIntervalRef = useRef(null);\r\n    const logsEndRef = useRef(null); // Ref for scrolling to the bottom of logs\r\n\r\n    // --- Fetching Task List ---\r\n    const fetchTasks = useCallback(async () => {\r\n        setIsLoadingTasks(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/api/v1/tasks`);\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            // Sort tasks by start time, newest first\r\n            const sortedTasks = Object.entries(data).map(([id, task]) => ({\r\n                id,\r\n                ...task,\r\n            })).sort((a, b) => new Date(b.start_time) - new Date(a.start_time));\r\n            setTasks(sortedTasks);\r\n        } catch (e) {\r\n            console.error(\"Error fetching tasks:\", e);\r\n            setError(`Failed to fetch tasks: ${e.message}`);\r\n            setTasks([]); // Clear tasks on error\r\n        } finally {\r\n            setIsLoadingTasks(false);\r\n        }\r\n    }, []);\r\n\r\n    // --- Fetching Task Details ---\r\n    const fetchTaskDetails = useCallback(async (taskId) => {\r\n        if (!taskId) return;\r\n        setIsLoadingDetails(true);\r\n        setError(null); // Clear previous detail errors\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/api/v1/tasks/${taskId}`);\r\n            if (!response.ok) {\r\n                if (response.status === 404) {\r\n                    throw new Error(`Task with ID ${taskId} not found.`);\r\n                }\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            setSelectedTaskDetails(data);\r\n            // Scroll to bottom after logs update\r\n            scrollToBottom();\r\n            return data; // Return data for polling check\r\n        } catch (e) {\r\n            console.error(`Error fetching details for task ${taskId}:`, e);\r\n            setError(`Failed to fetch details for task ${taskId}: ${e.message}`);\r\n            setSelectedTaskDetails(null); // Clear details on error\r\n            setSelectedTaskId(null); // Deselect task if details fail\r\n            return null; // Indicate failure\r\n        } finally {\r\n            setIsLoadingDetails(false);\r\n        }\r\n    }, []);\r\n\r\n\r\n    // --- Effects ---\r\n\r\n    // Fetch tasks on initial mount\r\n    useEffect(() => {\r\n        fetchTasks();\r\n    }, [fetchTasks]);\r\n\r\n    // Fetch details and manage polling when selectedTaskId changes\r\n    useEffect(() => {\r\n        // Clear previous interval if any\r\n        if (pollingIntervalRef.current) {\r\n            clearInterval(pollingIntervalRef.current);\r\n            pollingIntervalRef.current = null;\r\n        }\r\n        setSelectedTaskDetails(null); // Clear previous details when selection changes\r\n\r\n        if (selectedTaskId) {\r\n            const startPolling = async () => {\r\n                const initialDetails = await fetchTaskDetails(selectedTaskId);\r\n\r\n                // Start polling only if the task is still active (pending or running)\r\n                if (initialDetails && ['pending', 'running'].includes(initialDetails.status)) {\r\n                    pollingIntervalRef.current = setInterval(async () => {\r\n                        const currentDetails = await fetchTaskDetails(selectedTaskId);\r\n                        // Stop polling if task is completed or failed, or if fetch failed\r\n                        if (!currentDetails || !['pending', 'running'].includes(currentDetails.status)) {\r\n                            clearInterval(pollingIntervalRef.current);\r\n                            pollingIntervalRef.current = null;\r\n                        }\r\n                    }, 3000); // Poll every 3 seconds\r\n                }\r\n            };\r\n            startPolling();\r\n        }\r\n\r\n        // Cleanup function to clear interval when component unmounts or selectedTaskId changes\r\n        return () => {\r\n            if (pollingIntervalRef.current) {\r\n                clearInterval(pollingIntervalRef.current);\r\n            }\r\n        };\r\n    }, [selectedTaskId, fetchTaskDetails]);\r\n\r\n    // --- Helper Functions ---\r\n    const handleTaskSelect = (taskId) => {\r\n        if (taskId === selectedTaskId) {\r\n            setSelectedTaskId(null); // Deselect if clicking the same task\r\n        } else {\r\n            setSelectedTaskId(taskId);\r\n        }\r\n    };\r\n\r\n    const formatTimestamp = (isoString) => {\r\n        if (!isoString) return '';\r\n        try {\r\n            // More robust parsing\r\n            const date = new Date(isoString);\r\n            if (isNaN(date.getTime())) { // Check if date is valid\r\n                return isoString; // Return original string if invalid\r\n            }\r\n             // Format to local time, include seconds\r\n            return date.toLocaleString(undefined, {\r\n                year: 'numeric', month: 'numeric', day: 'numeric',\r\n                hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false\r\n            });\r\n        } catch (e) {\r\n            console.error(\"Error formatting timestamp:\", isoString, e);\r\n            return isoString; // Fallback\r\n        }\r\n    };\r\n\r\n    // Scroll to the bottom of the logs container\r\n    const scrollToBottom = () => {\r\n        logsEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n\r\n\r\n    // --- Rendering ---\r\n    return (\r\n        <div className=\"logs-page\">\r\n            <h1>Task Logs</h1>\r\n\r\n            {error && <div className=\"error-message\">Error: {error}</div>}\r\n\r\n            <div className=\"tasks-container\">\r\n                <div className=\"task-list-section\">\r\n                    <h2>Recent Tasks</h2>\r\n                    <button onClick={fetchTasks} disabled={isLoadingTasks}>\r\n                        {isLoadingTasks ? 'Refreshing...' : 'Refresh List'}\r\n                    </button>\r\n                    {isLoadingTasks && tasks.length === 0 ? (\r\n                         <p>Loading tasks...</p>\r\n                    ) : tasks.length === 0 && !isLoadingTasks ? (\r\n                         <p>No tasks found.</p>\r\n                    ) : (\r\n                        <ul className=\"task-list\">\r\n                            {tasks.map((task) => (\r\n                                <li\r\n                                    key={task.id}\r\n                                    className={`task-item ${task.id === selectedTaskId ? 'selected' : ''} status-${task.status?.toLowerCase()}`}\r\n                                    onClick={() => handleTaskSelect(task.id)}\r\n                                >\r\n                                    <span className=\"task-id\">ID: {task.id.substring(0, 8)}...</span>\r\n                                    <span className=\"task-desc\">{task.description || 'No description'}</span>\r\n                                    <span className={`task-status status-${task.status?.toLowerCase()}`}>{task.status || 'Unknown'}</span>\r\n                                    <span className=\"task-time\">Started: {formatTimestamp(task.start_time)}</span>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"task-details-section\">\r\n                    <h2>Task Details {selectedTaskId ? `(${selectedTaskId.substring(0, 8)}...)` : ''}</h2>\r\n                    {isLoadingDetails ? (\r\n                        <p>Loading details...</p>\r\n                    ) : selectedTaskDetails ? (\r\n                        <div className=\"details-content\">\r\n                            <p><strong>Status:</strong> <span className={`status-${selectedTaskDetails.status?.toLowerCase()}`}>{selectedTaskDetails.status}</span></p>\r\n                            <p><strong>Description:</strong> {selectedTaskDetails.description}</p>\r\n                            <p><strong>Started:</strong> {formatTimestamp(selectedTaskDetails.start_time)}</p>\r\n                            <p><strong>Last Updated:</strong> {formatTimestamp(selectedTaskDetails.last_updated)}</p>\r\n                            <div className=\"logs-output\">\r\n                                <h3>Logs:</h3>\r\n                                <pre>\r\n                                    {selectedTaskDetails.logs && selectedTaskDetails.logs.length > 0\r\n                                        ? selectedTaskDetails.logs.map((log, index) => (\r\n                                              <div key={index} className={`log-entry log-${log.level?.toLowerCase()}`}>\r\n                                                  <span className=\"log-time\">{formatTimestamp(log.timestamp)}</span>\r\n                                                  <span className=\"log-level\">[{log.level?.toUpperCase()}]</span>\r\n                                                  <span className=\"log-message\">{log.message}</span>\r\n                                              </div>\r\n                                          ))\r\n                                        : \"No logs yet.\"}\r\n                                        <div ref={logsEndRef} /> {/* Anchor for scrolling */}\r\n                                </pre>\r\n                            </div>\r\n                        </div>\r\n                    ) : (\r\n                        <p>Select a task from the list to view its details and logs.</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LogsPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
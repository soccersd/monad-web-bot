{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cymst\\\\Documents\\\\monad bot\\\\frontend\\\\src\\\\context\\\\AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid'; // Import UUID for step IDs\n\n// Define API base URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n\n// Mock data for workflows (Added initial empty steps array)\nconst MOCK_WORKFLOWS = [{\n  id: 1,\n  name: 'Kitsu Stake',\n  type: 'stake',\n  contractType: 'kitsu',\n  steps: []\n}, {\n  id: 2,\n  name: 'NFT Minter (Counter)',\n  type: 'deploy',\n  contractType: 'counter',\n  steps: []\n}, {\n  id: 3,\n  name: 'Uniswap Swap',\n  type: 'swap',\n  fromToken: 'ETH',\n  toToken: 'USDC',\n  steps: []\n}, {\n  id: 4,\n  name: 'Send MON',\n  type: 'send',\n  mode: 'random',\n  steps: []\n}, {\n  id: 5,\n  name: 'Bebop Wrap/Unwrap',\n  type: 'bebop',\n  steps: []\n}, {\n  id: 6,\n  name: 'Izumi Wrap/Unwrap',\n  type: 'izumi',\n  steps: []\n}, {\n  id: 7,\n  name: 'Lilchogstars Mint',\n  type: 'lilchogstars',\n  steps: []\n}, {\n  id: 8,\n  name: 'Mono Transaction',\n  type: 'mono',\n  steps: []\n}, {\n  id: 9,\n  name: 'Rubic Swap MON->USDT',\n  type: 'rubic',\n  steps: []\n}, {\n  id: 10,\n  name: 'Ambient Swap (Random)',\n  type: 'ambient',\n  steps: []\n}, {\n  id: 11,\n  name: 'Apriori Full Cycle',\n  type: 'apriori',\n  steps: []\n}, {\n  id: 12,\n  name: 'Bean Swap (MON->USDC)',\n  type: 'bean',\n  steps: []\n}, {\n  id: 13,\n  name: 'Bima Lend',\n  type: 'bima',\n  steps: []\n}];\n\n// Create the context\nconst AppContext = /*#__PURE__*/createContext();\n\n// Provider component that wraps the app\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  // Workflows state - using MOCK for now, but steps can be modified\n  const [workflows, setWorkflows] = useState(MOCK_WORKFLOWS);\n  const [selectedWorkflowId, setSelectedWorkflowId] = useState(2); // Default to NFT Minter\n\n  // Wallets state\n  const [wallets, setWallets] = useState([]);\n  const [isLoadingWallets, setIsLoadingWallets] = useState(false);\n  const [walletError, setWalletError] = useState(null);\n  const [isImportingWallet, setIsImportingWallet] = useState(false);\n  const [newWalletImport, setNewWalletImport] = useState({\n    privateKey: '',\n    nickname: ''\n  });\n\n  // Tasks/runs state\n  const [tasks, setTasks] = useState([]);\n  const [isLoadingTasks, setIsLoadingTasks] = useState(false);\n  const [taskError, setTaskError] = useState(null);\n\n  // Get the selected workflow object\n  const selectedWorkflow = workflows.find(w => w.id === selectedWorkflowId) || workflows[0];\n\n  // Get selected wallets\n  const selectedWallets = wallets.filter(w => w.selected);\n\n  // --- Workflow Selection ---\n  const selectWorkflow = id => {\n    setSelectedWorkflowId(id);\n  };\n\n  // --- Wallet Management ---\n  const toggleWalletSelection = id => {\n    setWallets(wallets.map(wallet => wallet.id === id ? {\n      ...wallet,\n      selected: !wallet.selected\n    } : wallet));\n  };\n  const importWallet = async (privateKey, nickname = '') => {\n    setIsImportingWallet(true);\n    setWalletError(null);\n    try {\n      if (!privateKey.startsWith('0x') || privateKey.length !== 66) {\n        throw new Error('Invalid private key format (must be 0x followed by 64 hex chars)');\n      }\n      const addressResponse = await fetch(`${API_BASE_URL}/api/v1/get-address-from-key`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          private_key: privateKey\n        })\n      });\n      if (!addressResponse.ok) {\n        let errorMsg = 'Failed to derive address from key.';\n        try {\n          const errorData = await addressResponse.json();\n          errorMsg = errorData.detail || errorMsg;\n        } catch {/* Ignore */}\n        throw new Error(errorMsg);\n      }\n      const addressData = await addressResponse.json();\n      const realAddress = addressData.address;\n      if (wallets.some(w => w.address === realAddress)) {\n        throw new Error(`Wallet with address ${realAddress} already exists.`);\n      }\n      const newWallet = {\n        id: wallets.length > 0 ? Math.max(...wallets.map(w => w.id)) + 1 : 1,\n        address: realAddress,\n        privateKey: privateKey,\n        balance: null,\n        selected: true,\n        nickname: nickname || `Wallet ${realAddress.substring(0, 6)}...`\n      };\n      setWallets(prevWallets => [...prevWallets, newWallet]);\n      setNewWalletImport({\n        privateKey: '',\n        nickname: ''\n      });\n      await fetchWalletBalance(newWallet.id, newWallet.address);\n      return {\n        success: true,\n        message: 'Wallet imported successfully'\n      };\n    } catch (error) {\n      console.error('Error importing wallet:', error);\n      setWalletError(`Failed to import wallet: ${error.message}`);\n      return {\n        success: false,\n        message: error.message\n      };\n    } finally {\n      setIsImportingWallet(false);\n    }\n  };\n  const fetchWalletBalances = async () => {\n    setIsLoadingWallets(true);\n    setWalletError(null);\n    const balancePromises = wallets.map(wallet => fetchWalletBalance(wallet.id, wallet.address));\n    try {\n      await Promise.all(balancePromises);\n    } catch (error) {\n      console.error('Error fetching some wallet balances:', error);\n    } finally {\n      setIsLoadingWallets(false);\n    }\n  };\n  const fetchWalletBalance = async (walletId, walletAddress) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/v1/get-balance/${walletAddress}`);\n      if (!response.ok) {\n        let errorMsg = `Failed to fetch balance for ${walletAddress}. Status: ${response.status}`;\n        try {\n          const errorData = await response.json();\n          errorMsg = `${errorMsg} - ${errorData.detail || 'Unknown error'}`;\n        } catch {/* Ignore */}\n        throw new Error(errorMsg);\n      }\n      const data = await response.json();\n      const balance = data.balance;\n      setWallets(prevWallets => prevWallets.map(wallet => wallet.id === walletId ? {\n        ...wallet,\n        balance: balance\n      } : wallet));\n    } catch (error) {\n      console.error(`Error fetching balance for wallet ${walletAddress} (ID: ${walletId}):`, error);\n      setWallets(prevWallets => prevWallets.map(wallet => wallet.id === walletId ? {\n        ...wallet,\n        balance: 'Error'\n      } : wallet));\n      throw error;\n    }\n  };\n  const handleWalletImportChange = (field, value) => {\n    setNewWalletImport(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  const deleteWallet = id => {\n    setWallets(prevWallets => prevWallets.filter(wallet => wallet.id !== id));\n    // TODO: Optionally call a backend endpoint to delete server-side if needed\n  };\n\n  // --- Task Management ---\n  const fetchTasks = async () => {\n    setIsLoadingTasks(true);\n    setTaskError(null);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/v1/tasks`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const tasksData = Object.entries(data.tasks || {}).map(([id, task]) => ({\n        id,\n        // Use the task ID from the backend object key\n        ...task,\n        startTime: new Date(task.start_time),\n        // Ensure steps array exists in task data if provided by backend\n        steps: task.steps || []\n      }));\n      tasksData.sort((a, b) => b.startTime - a.startTime);\n      setTasks(tasksData);\n    } catch (error) {\n      console.error(\"Failed to fetch tasks:\", error);\n      setTaskError(`Error fetching tasks: ${error.message}`);\n      setTasks([]);\n    } finally {\n      setIsLoadingTasks(false);\n    }\n  };\n\n  // --- Workflow Step Management ---\n  const addStepToWorkflow = (workflowId, stepType) => {\n    console.log('AppContext: addStepToWorkflow called with:', workflowId, stepType); // DEBUG\n    setWorkflows(prevWorkflows => {\n      const updatedWorkflows = prevWorkflows.map(w => {\n        if (w.id === workflowId) {\n          const newStep = {\n            step_id: uuidv4(),\n            // Generate a unique ID for the step\n            type: stepType,\n            config: getDefaultConfigForStepType(stepType) // Get default config based on type\n          };\n          // Ensure steps array exists before spreading\n          const existingSteps = Array.isArray(w.steps) ? w.steps : [];\n          return {\n            ...w,\n            steps: [...existingSteps, newStep]\n          };\n        }\n        return w;\n      });\n      console.log('AppContext: Workflows state AFTER update:', updatedWorkflows); // DEBUG\n      return updatedWorkflows;\n    });\n  };\n  const deleteStepFromWorkflow = (workflowId, stepId) => {\n    console.log('AppContext: deleteStepFromWorkflow called with:', workflowId, stepId); // DEBUG\n    setWorkflows(prevWorkflows => prevWorkflows.map(w => {\n      if (w.id === workflowId) {\n        // Ensure steps array exists before filtering\n        const existingSteps = Array.isArray(w.steps) ? w.steps : [];\n        return {\n          ...w,\n          steps: existingSteps.filter(step => step.step_id !== stepId)\n        };\n      }\n      return w;\n    }));\n  };\n  const updateStepConfig = (workflowId, stepId, newConfig) => {\n    console.log('AppContext: updateStepConfig called with:', workflowId, stepId, newConfig); // DEBUG\n    setWorkflows(prevWorkflows => prevWorkflows.map(w => {\n      if (w.id === workflowId) {\n        // Ensure steps array exists before mapping\n        const existingSteps = Array.isArray(w.steps) ? w.steps : [];\n        return {\n          ...w,\n          steps: existingSteps.map(step => step.step_id === stepId ? {\n            ...step,\n            config: newConfig\n          } : step)\n        };\n      }\n      return w;\n    }));\n  };\n\n  // Helper to get default config for a new step\n  const getDefaultConfigForStepType = stepType => {\n    console.log('AppContext: getDefaultConfigForStepType called with:', stepType); // DEBUG\n    switch (stepType) {\n      case 'delay':\n        return {\n          duration_seconds: 60\n        };\n      case 'stake':\n        return {\n          contract_type: 'kitsu',\n          amount: '0.1',\n          amount_mon: 0.1\n        };\n      // amount_mon for backend maybe?\n      case 'swap':\n        return {\n          token_from_symbol: 'MON',\n          token_to_symbol: 'USDC',\n          amount_str: '1'\n        };\n      case 'deploy':\n        return {\n          contract_name: 'MyCounter',\n          contract_symbol: 'MCT'\n        };\n      case 'send':\n        return {\n          amount_mon: 0.001,\n          mode: 'random'\n        };\n      case 'bebop':\n        return {\n          amount_mon: 0.01\n        };\n      case 'izumi':\n        return {\n          amount_mon: 0.01\n        };\n      case 'lilchogstars':\n        return {\n          quantity: 1\n        };\n      case 'mono':\n        return {\n          recipient_address: '0x052135aBEc9A037C15554dEC1ca60a5B5aD88e52',\n          value_mon: 0.005\n        };\n      case 'rubic':\n        return {\n          amount_mon: 0.01\n        };\n      case 'ambient':\n        return {\n          amount_percent: 100.0\n        };\n      // token_in/out default to null/random\n      case 'apriori':\n        return {};\n      // No specific config needed for full cycle step\n      case 'bean':\n        return {\n          direction: 'to_token',\n          token_symbol: 'USDC',\n          amount: 0.001\n        };\n      case 'bima':\n        return {};\n      // percent_to_lend defaults to null/backend default\n      default:\n        return {};\n    }\n  };\n\n  // --- Run Multi-Step Workflow ---\n  const runMultiStepWorkflow = async (workflowId, rpcUrl = 'https://testnet-rpc.monad.xyz/', delayBetweenKeys = 5) => {\n    const workflowToRun = workflows.find(w => w.id === workflowId);\n    if (!workflowToRun || selectedWallets.length === 0) {\n      console.error(\"runMultiStepWorkflow Error: Workflow not found or no wallets selected\", workflowToRun, selectedWallets);\n      return {\n        success: false,\n        message: \"Workflow not found or no wallets selected\"\n      };\n    }\n    // Ensure steps array exists\n    const stepsToRun = Array.isArray(workflowToRun.steps) ? workflowToRun.steps : [];\n    if (stepsToRun.length === 0) {\n      console.error(\"runMultiStepWorkflow Error: Workflow has no steps defined\");\n      return {\n        success: false,\n        message: \"Workflow has no steps defined\"\n      };\n    }\n    console.log(\"Running multi-step workflow:\", workflowToRun.name);\n    console.log(\"Steps:\", stepsToRun);\n    console.log(\"Selected Wallets:\", selectedWallets.map(w => w.address));\n    const payload = {\n      private_keys: selectedWallets.map(w => w.privateKey),\n      rpc_url: rpcUrl,\n      // Allow override later if needed\n      task_description: `${workflowToRun.name} (Multi-Step Run)`,\n      // More specific description\n      delay_between_keys_seconds: delayBetweenKeys,\n      // Use provided or default\n      steps: stepsToRun.map(step => ({\n        // Ensure payload matches backend model\n        step_id: step.step_id,\n        type: step.type,\n        // Make sure config is not null/undefined before sending\n        config: step.config || {}\n      }))\n    };\n    console.log(\"Sending payload to backend:\", payload);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/v1/start-multi-step-workflow`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      console.log(\"Backend response:\", response.status, result);\n      if (!response.ok) {\n        throw new Error(result.detail || `HTTP error! status: ${response.status}`);\n      }\n      console.log(\"Multi-step workflow started successfully:\", result);\n      // Fetch tasks again to show the newly started task\n      await fetchTasks();\n      return {\n        success: true,\n        message: \"Workflow started successfully\",\n        taskId: result.task_id\n      };\n    } catch (error) {\n      console.error(\"Failed to start multi-step workflow:\", error);\n      setTaskError(`Error starting workflow: ${error.message}`); // Display error to user\n      return {\n        success: false,\n        message: `Failed to start workflow: ${error.message}`\n      };\n    }\n  };\n\n  // --- (DEPRECATED/Optional) Old Run Workflow ---\n  // Keep or remove based on whether single-step endpoints are still needed\n  const runWorkflow = async () => {\n    // ... (existing runWorkflow logic - kept for reference, but shouldn't be called by new UI) ...\n    console.warn(\"runWorkflow (single-step) is deprecated. Use runMultiStepWorkflow.\");\n    // Find the appropriate old endpoint based on selectedWorkflow.type\n    let endpoint = '';\n    let payloadData = {/* ... construct old payload ... */};\n    switch (selectedWorkflow.type) {\n      case 'stake':\n        endpoint = '/api/v1/start-stake-cycle';\n        break;\n      // ... other cases ...\n      default:\n        return {\n          success: false,\n          message: \"Deprecated workflow type\"\n        };\n    }\n    // Make fetch call to old endpoint...\n    return {\n      success: false,\n      message: \"Use Multi-Step Runner\"\n    }; // Return failure for now\n  };\n\n  // --- Initialization & Polling ---\n  useEffect(() => {\n    // Initial fetch of tasks\n    fetchTasks();\n    // Initial fetch of balances only if wallets exist\n    if (wallets.length > 0) {\n      fetchWalletBalances();\n    }\n\n    // Set up polling intervals\n    const tasksInterval = setInterval(fetchTasks, 10000); // Refresh tasks every 10 seconds\n    const walletsInterval = setInterval(() => {\n      if (wallets.length > 0) {\n        // Only fetch balances if wallets exist\n        fetchWalletBalances();\n      }\n    }, 30000); // Refresh wallets every 30 seconds\n\n    // Clean up intervals on unmount\n    return () => {\n      clearInterval(tasksInterval);\n      clearInterval(walletsInterval);\n    };\n  }, [wallets.length]); // Re-run effect if wallet count changes (to start/stop polling balances)\n\n  // --- Context Value ---\n  // Make sure all required functions and state are included\n  const value = {\n    workflows,\n    selectedWorkflowId,\n    selectedWorkflow,\n    selectWorkflow,\n    wallets,\n    selectedWallets,\n    toggleWalletSelection,\n    importWallet,\n    fetchWalletBalances,\n    deleteWallet,\n    // Added deleteWallet function\n    isLoadingWallets,\n    walletError,\n    isImportingWallet,\n    newWalletImport,\n    handleWalletImportChange,\n    tasks,\n    isLoadingTasks,\n    taskError,\n    fetchTasks,\n    // New Step Management Functions\n    addStepToWorkflow,\n    deleteStepFromWorkflow,\n    updateStepConfig,\n    // getDefaultConfigForStepType, // Not needed directly by consumers\n\n    // New Multi-Step Runner\n    runMultiStepWorkflow,\n    // Old runner (optional/deprecated)\n    runWorkflow\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 401,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use the context\n_s(AppProvider, \"XSTaTui4aIJjHiJVMfZyfZhLdgk=\");\n_c = AppProvider;\nexport const useAppContext = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext; // Ensure default export is correct if used elsewhere\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","v4","uuidv4","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","MOCK_WORKFLOWS","id","name","type","contractType","steps","fromToken","toToken","mode","AppContext","AppProvider","children","_s","workflows","setWorkflows","selectedWorkflowId","setSelectedWorkflowId","wallets","setWallets","isLoadingWallets","setIsLoadingWallets","walletError","setWalletError","isImportingWallet","setIsImportingWallet","newWalletImport","setNewWalletImport","privateKey","nickname","tasks","setTasks","isLoadingTasks","setIsLoadingTasks","taskError","setTaskError","selectedWorkflow","find","w","selectedWallets","filter","selected","selectWorkflow","toggleWalletSelection","map","wallet","importWallet","startsWith","length","Error","addressResponse","fetch","method","headers","body","JSON","stringify","private_key","ok","errorMsg","errorData","json","detail","addressData","realAddress","address","some","newWallet","Math","max","balance","substring","prevWallets","fetchWalletBalance","success","message","error","console","fetchWalletBalances","balancePromises","Promise","all","walletId","walletAddress","response","status","data","handleWalletImportChange","field","value","prev","deleteWallet","fetchTasks","tasksData","Object","entries","task","startTime","Date","start_time","sort","a","b","addStepToWorkflow","workflowId","stepType","log","prevWorkflows","updatedWorkflows","newStep","step_id","config","getDefaultConfigForStepType","existingSteps","Array","isArray","deleteStepFromWorkflow","stepId","step","updateStepConfig","newConfig","duration_seconds","contract_type","amount","amount_mon","token_from_symbol","token_to_symbol","amount_str","contract_name","contract_symbol","quantity","recipient_address","value_mon","amount_percent","direction","token_symbol","runMultiStepWorkflow","rpcUrl","delayBetweenKeys","workflowToRun","stepsToRun","payload","private_keys","rpc_url","task_description","delay_between_keys_seconds","result","taskId","task_id","runWorkflow","warn","endpoint","payloadData","tasksInterval","setInterval","walletsInterval","clearInterval","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","context","undefined","$RefreshReg$"],"sources":["C:/Users/cymst/Documents/monad bot/frontend/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid'; // Import UUID for step IDs\n\n// Define API base URL\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n\n// Mock data for workflows (Added initial empty steps array)\nconst MOCK_WORKFLOWS = [\n  { id: 1, name: 'Kitsu Stake', type: 'stake', contractType: 'kitsu', steps: [] },\n  { id: 2, name: 'NFT Minter (Counter)', type: 'deploy', contractType: 'counter', steps: [] },\n  { id: 3, name: 'Uniswap Swap', type: 'swap', fromToken: 'ETH', toToken: 'USDC', steps: [] },\n  { id: 4, name: 'Send MON', type: 'send', mode: 'random', steps: [] },\n  { id: 5, name: 'Bebop Wrap/Unwrap', type: 'bebop', steps: [] },\n  { id: 6, name: 'Izumi Wrap/Unwrap', type: 'izumi', steps: [] },\n  { id: 7, name: 'Lilchogstars Mint', type: 'lilchogstars', steps: [] },\n  { id: 8, name: 'Mono Transaction', type: 'mono', steps: [] },\n  { id: 9, name: 'Rubic Swap MON->USDT', type: 'rubic', steps: [] },\n  { id: 10, name: 'Ambient Swap (Random)', type: 'ambient', steps: [] },\n  { id: 11, name: 'Apriori Full Cycle', type: 'apriori', steps: [] },\n  { id: 12, name: 'Bean Swap (MON->USDC)', type: 'bean', steps: [] },\n  { id: 13, name: 'Bima Lend', type: 'bima', steps: [] }\n];\n\n// Create the context\nconst AppContext = createContext();\n\n// Provider component that wraps the app\nexport const AppProvider = ({ children }) => {\n  // Workflows state - using MOCK for now, but steps can be modified\n  const [workflows, setWorkflows] = useState(MOCK_WORKFLOWS);\n  const [selectedWorkflowId, setSelectedWorkflowId] = useState(2); // Default to NFT Minter\n\n  // Wallets state\n  const [wallets, setWallets] = useState([]);\n  const [isLoadingWallets, setIsLoadingWallets] = useState(false);\n  const [walletError, setWalletError] = useState(null);\n  const [isImportingWallet, setIsImportingWallet] = useState(false);\n  const [newWalletImport, setNewWalletImport] = useState({ privateKey: '', nickname: '' });\n\n  // Tasks/runs state\n  const [tasks, setTasks] = useState([]);\n  const [isLoadingTasks, setIsLoadingTasks] = useState(false);\n  const [taskError, setTaskError] = useState(null);\n\n  // Get the selected workflow object\n  const selectedWorkflow = workflows.find(w => w.id === selectedWorkflowId) || workflows[0];\n\n  // Get selected wallets\n  const selectedWallets = wallets.filter(w => w.selected);\n\n  // --- Workflow Selection ---\n  const selectWorkflow = (id) => {\n    setSelectedWorkflowId(id);\n  };\n\n  // --- Wallet Management ---\n  const toggleWalletSelection = (id) => {\n    setWallets(wallets.map(wallet =>\n      wallet.id === id ? { ...wallet, selected: !wallet.selected } : wallet\n    ));\n  };\n\n  const importWallet = async (privateKey, nickname = '') => {\n    setIsImportingWallet(true);\n    setWalletError(null);\n    try {\n      if (!privateKey.startsWith('0x') || privateKey.length !== 66) {\n        throw new Error('Invalid private key format (must be 0x followed by 64 hex chars)');\n      }\n      const addressResponse = await fetch(`${API_BASE_URL}/api/v1/get-address-from-key`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ private_key: privateKey }),\n      });\n      if (!addressResponse.ok) {\n        let errorMsg = 'Failed to derive address from key.';\n        try { const errorData = await addressResponse.json(); errorMsg = errorData.detail || errorMsg; } catch { /* Ignore */ }\n        throw new Error(errorMsg);\n      }\n      const addressData = await addressResponse.json();\n      const realAddress = addressData.address;\n      if (wallets.some(w => w.address === realAddress)) {\n        throw new Error(`Wallet with address ${realAddress} already exists.`);\n      }\n      const newWallet = {\n        id: wallets.length > 0 ? Math.max(...wallets.map(w => w.id)) + 1 : 1,\n        address: realAddress,\n        privateKey: privateKey,\n        balance: null,\n        selected: true,\n        nickname: nickname || `Wallet ${realAddress.substring(0, 6)}...`\n      };\n      setWallets(prevWallets => [...prevWallets, newWallet]);\n      setNewWalletImport({ privateKey: '', nickname: '' });\n      await fetchWalletBalance(newWallet.id, newWallet.address);\n      return { success: true, message: 'Wallet imported successfully' };\n    } catch (error) {\n      console.error('Error importing wallet:', error);\n      setWalletError(`Failed to import wallet: ${error.message}`);\n      return { success: false, message: error.message };\n    } finally {\n      setIsImportingWallet(false);\n    }\n  };\n\n  const fetchWalletBalances = async () => {\n    setIsLoadingWallets(true);\n    setWalletError(null);\n    const balancePromises = wallets.map(wallet => fetchWalletBalance(wallet.id, wallet.address));\n    try {\n      await Promise.all(balancePromises);\n    } catch (error) {\n      console.error('Error fetching some wallet balances:', error);\n    } finally {\n      setIsLoadingWallets(false);\n    }\n  };\n\n  const fetchWalletBalance = async (walletId, walletAddress) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/v1/get-balance/${walletAddress}`);\n      if (!response.ok) {\n        let errorMsg = `Failed to fetch balance for ${walletAddress}. Status: ${response.status}`;\n        try { const errorData = await response.json(); errorMsg = `${errorMsg} - ${errorData.detail || 'Unknown error'}`; } catch { /* Ignore */ }\n        throw new Error(errorMsg);\n      }\n      const data = await response.json();\n      const balance = data.balance;\n      setWallets(prevWallets =>\n        prevWallets.map(wallet =>\n          wallet.id === walletId ? { ...wallet, balance: balance } : wallet\n        )\n      );\n    } catch (error) {\n      console.error(`Error fetching balance for wallet ${walletAddress} (ID: ${walletId}):`, error);\n      setWallets(prevWallets =>\n        prevWallets.map(wallet =>\n          wallet.id === walletId ? { ...wallet, balance: 'Error' } : wallet\n        )\n      );\n      throw error;\n    }\n  };\n\n  const handleWalletImportChange = (field, value) => {\n    setNewWalletImport(prev => ({ ...prev, [field]: value }));\n  };\n\n  const deleteWallet = (id) => {\n    setWallets(prevWallets => prevWallets.filter(wallet => wallet.id !== id));\n    // TODO: Optionally call a backend endpoint to delete server-side if needed\n  };\n\n  // --- Task Management ---\n  const fetchTasks = async () => {\n    setIsLoadingTasks(true);\n    setTaskError(null);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/v1/tasks`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const tasksData = Object.entries(data.tasks || {}).map(([id, task]) => ({\n        id, // Use the task ID from the backend object key\n        ...task,\n        startTime: new Date(task.start_time),\n        // Ensure steps array exists in task data if provided by backend\n        steps: task.steps || [],\n      }));\n      tasksData.sort((a, b) => b.startTime - a.startTime);\n      setTasks(tasksData);\n    } catch (error) {\n      console.error(\"Failed to fetch tasks:\", error);\n      setTaskError(`Error fetching tasks: ${error.message}`);\n      setTasks([]);\n    } finally {\n      setIsLoadingTasks(false);\n    }\n  };\n\n  // --- Workflow Step Management ---\n  const addStepToWorkflow = (workflowId, stepType) => {\n      console.log('AppContext: addStepToWorkflow called with:', workflowId, stepType); // DEBUG\n      setWorkflows(prevWorkflows => {\n          const updatedWorkflows = prevWorkflows.map(w => {\n              if (w.id === workflowId) {\n                  const newStep = {\n                      step_id: uuidv4(), // Generate a unique ID for the step\n                      type: stepType,\n                      config: getDefaultConfigForStepType(stepType), // Get default config based on type\n                  };\n                  // Ensure steps array exists before spreading\n                  const existingSteps = Array.isArray(w.steps) ? w.steps : [];\n                  return { ...w, steps: [...existingSteps, newStep] };\n              }\n              return w;\n          });\n          console.log('AppContext: Workflows state AFTER update:', updatedWorkflows); // DEBUG\n          return updatedWorkflows;\n        }\n      );\n  };\n\n  const deleteStepFromWorkflow = (workflowId, stepId) => {\n       console.log('AppContext: deleteStepFromWorkflow called with:', workflowId, stepId); // DEBUG\n      setWorkflows(prevWorkflows =>\n          prevWorkflows.map(w => {\n              if (w.id === workflowId) {\n                   // Ensure steps array exists before filtering\n                  const existingSteps = Array.isArray(w.steps) ? w.steps : [];\n                  return { ...w, steps: existingSteps.filter(step => step.step_id !== stepId) };\n              }\n              return w;\n          })\n      );\n  };\n\n  const updateStepConfig = (workflowId, stepId, newConfig) => {\n       console.log('AppContext: updateStepConfig called with:', workflowId, stepId, newConfig); // DEBUG\n      setWorkflows(prevWorkflows =>\n          prevWorkflows.map(w => {\n              if (w.id === workflowId) {\n                  // Ensure steps array exists before mapping\n                  const existingSteps = Array.isArray(w.steps) ? w.steps : [];\n                  return {\n                      ...w,\n                      steps: existingSteps.map(step =>\n                          step.step_id === stepId ? { ...step, config: newConfig } : step\n                      )\n                  };\n              }\n              return w;\n          })\n      );\n  };\n\n  // Helper to get default config for a new step\n  const getDefaultConfigForStepType = (stepType) => {\n      console.log('AppContext: getDefaultConfigForStepType called with:', stepType); // DEBUG\n      switch (stepType) {\n          case 'delay': return { duration_seconds: 60 };\n          case 'stake': return { contract_type: 'kitsu', amount: '0.1', amount_mon: 0.1 }; // amount_mon for backend maybe?\n          case 'swap': return { token_from_symbol: 'MON', token_to_symbol: 'USDC', amount_str: '1' };\n          case 'deploy': return { contract_name: 'MyCounter', contract_symbol: 'MCT' };\n          case 'send': return { amount_mon: 0.001, mode: 'random' };\n          case 'bebop': return { amount_mon: 0.01 };\n          case 'izumi': return { amount_mon: 0.01 };\n          case 'lilchogstars': return { quantity: 1 };\n          case 'mono': return { recipient_address: '0x052135aBEc9A037C15554dEC1ca60a5B5aD88e52', value_mon: 0.005 };\n          case 'rubic': return { amount_mon: 0.01 };\n          case 'ambient': return { amount_percent: 100.0 }; // token_in/out default to null/random\n          case 'apriori': return {}; // No specific config needed for full cycle step\n          case 'bean': return { direction: 'to_token', token_symbol: 'USDC', amount: 0.001 };\n          case 'bima': return {}; // percent_to_lend defaults to null/backend default\n          default: return {};\n      }\n  };\n\n  // --- Run Multi-Step Workflow ---\n  const runMultiStepWorkflow = async (workflowId, rpcUrl = 'https://testnet-rpc.monad.xyz/', delayBetweenKeys = 5) => {\n    const workflowToRun = workflows.find(w => w.id === workflowId);\n    if (!workflowToRun || selectedWallets.length === 0) {\n        console.error(\"runMultiStepWorkflow Error: Workflow not found or no wallets selected\", workflowToRun, selectedWallets);\n        return { success: false, message: \"Workflow not found or no wallets selected\" };\n    }\n     // Ensure steps array exists\n    const stepsToRun = Array.isArray(workflowToRun.steps) ? workflowToRun.steps : [];\n    if (stepsToRun.length === 0) {\n         console.error(\"runMultiStepWorkflow Error: Workflow has no steps defined\");\n        return { success: false, message: \"Workflow has no steps defined\" };\n    }\n\n    console.log(\"Running multi-step workflow:\", workflowToRun.name);\n    console.log(\"Steps:\", stepsToRun);\n    console.log(\"Selected Wallets:\", selectedWallets.map(w => w.address));\n\n    const payload = {\n        private_keys: selectedWallets.map(w => w.privateKey),\n        rpc_url: rpcUrl, // Allow override later if needed\n        task_description: `${workflowToRun.name} (Multi-Step Run)`, // More specific description\n        delay_between_keys_seconds: delayBetweenKeys, // Use provided or default\n        steps: stepsToRun.map(step => ({ // Ensure payload matches backend model\n            step_id: step.step_id,\n            type: step.type,\n            // Make sure config is not null/undefined before sending\n            config: step.config || {},\n        }))\n    };\n\n    console.log(\"Sending payload to backend:\", payload);\n\n    try {\n        const response = await fetch(`${API_BASE_URL}/api/v1/start-multi-step-workflow`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(payload),\n        });\n\n        const result = await response.json();\n        console.log(\"Backend response:\", response.status, result);\n\n        if (!response.ok) {\n            throw new Error(result.detail || `HTTP error! status: ${response.status}`);\n        }\n\n        console.log(\"Multi-step workflow started successfully:\", result);\n        // Fetch tasks again to show the newly started task\n        await fetchTasks();\n        return { success: true, message: \"Workflow started successfully\", taskId: result.task_id };\n\n    } catch (error) {\n        console.error(\"Failed to start multi-step workflow:\", error);\n        setTaskError(`Error starting workflow: ${error.message}`); // Display error to user\n        return { success: false, message: `Failed to start workflow: ${error.message}` };\n    }\n  };\n\n  // --- (DEPRECATED/Optional) Old Run Workflow ---\n  // Keep or remove based on whether single-step endpoints are still needed\n  const runWorkflow = async () => {\n    // ... (existing runWorkflow logic - kept for reference, but shouldn't be called by new UI) ...\n    console.warn(\"runWorkflow (single-step) is deprecated. Use runMultiStepWorkflow.\");\n    // Find the appropriate old endpoint based on selectedWorkflow.type\n    let endpoint = '';\n    let payloadData = { /* ... construct old payload ... */ };\n     switch (selectedWorkflow.type) {\n         case 'stake': endpoint = '/api/v1/start-stake-cycle'; break;\n         // ... other cases ...\n         default: return { success: false, message: \"Deprecated workflow type\" };\n     }\n     // Make fetch call to old endpoint...\n    return { success: false, message: \"Use Multi-Step Runner\" }; // Return failure for now\n  };\n\n  // --- Initialization & Polling ---\n  useEffect(() => {\n    // Initial fetch of tasks\n    fetchTasks();\n    // Initial fetch of balances only if wallets exist\n    if (wallets.length > 0) {\n        fetchWalletBalances();\n    }\n\n    // Set up polling intervals\n    const tasksInterval = setInterval(fetchTasks, 10000); // Refresh tasks every 10 seconds\n    const walletsInterval = setInterval(() => {\n         if (wallets.length > 0) { // Only fetch balances if wallets exist\n             fetchWalletBalances();\n         }\n     }, 30000); // Refresh wallets every 30 seconds\n\n    // Clean up intervals on unmount\n    return () => {\n      clearInterval(tasksInterval);\n      clearInterval(walletsInterval);\n    };\n  }, [wallets.length]); // Re-run effect if wallet count changes (to start/stop polling balances)\n\n\n  // --- Context Value ---\n  // Make sure all required functions and state are included\n  const value = {\n    workflows,\n    selectedWorkflowId,\n    selectedWorkflow,\n    selectWorkflow,\n\n    wallets,\n    selectedWallets,\n    toggleWalletSelection,\n    importWallet,\n    fetchWalletBalances,\n    deleteWallet, // Added deleteWallet function\n    isLoadingWallets,\n    walletError,\n    isImportingWallet,\n    newWalletImport,\n    handleWalletImportChange,\n\n    tasks,\n    isLoadingTasks,\n    taskError,\n    fetchTasks,\n\n    // New Step Management Functions\n    addStepToWorkflow,\n    deleteStepFromWorkflow,\n    updateStepConfig,\n    // getDefaultConfigForStepType, // Not needed directly by consumers\n\n    // New Multi-Step Runner\n    runMultiStepWorkflow,\n\n    // Old runner (optional/deprecated)\n    runWorkflow,\n  };\n\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n};\n\n// Custom hook to use the context\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n\nexport default AppContext; // Ensure default export is correct if used elsewhere"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}